<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Bannerify\Bannerify;

/** Bannerify */
class Bannerify
{
    public const SERVERS = [
        /** Production */
        'https://api.bannerify.co',
    ];

    /**
     * Returns a new instance of the SDK builder used to configure and create the SDK instance.
     *
     * @return BannerifyBuilder
     */
    public static function builder(): BannerifyBuilder
    {
        return new BannerifyBuilder();
    }

    /**
     * @param  SDKConfiguration  $sdkConfiguration
     */
    public function __construct(
        private SDKConfiguration $sdkConfiguration,
    ) {
    }

    /**
     * postV1TemplatesCreateImage
     *
     * @param  \Bannerify\Bannerify\Models\Operations\PostV1TemplatesCreateImageRequestBody  $request
     * @return \Bannerify\Bannerify\Models\Operations\PostV1TemplatesCreateImageResponse
     */
    public function postV1TemplatesCreateImage(
        \Bannerify\Bannerify\Models\Operations\PostV1TemplatesCreateImageRequestBody $request,
    ): \Bannerify\Bannerify\Models\Operations\PostV1TemplatesCreateImageResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/templates/createImage');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, image/png;q=0.7, image/svg+xml;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Bannerify\Bannerify\Models\Operations\PostV1TemplatesCreateImageResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'image/png')) {
                $response->bytes = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/svg+xml')) {
                $response->res = $httpResponse->getBody()->getContents();
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneOf = $serializer->deserialize((string) $httpResponse->getBody(), 'mixed', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errUnauthorized = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrUnauthorized', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errForbidden = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrForbidden', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errNotFound = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrNotFound', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errConflict = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrConflict', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errTooManyRequests = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrTooManyRequests', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errInternalServerError = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrInternalServerError', 'json');
            }
        }

        return $response;
    }

    /**
     * getV1TemplatesSignedurl
     *
     * @param  \Bannerify\Bannerify\Models\Operations\GetV1TemplatesSignedurlRequest  $request
     * @return \Bannerify\Bannerify\Models\Operations\GetV1TemplatesSignedurlResponse
     */
    public function getV1TemplatesSignedurl(
        ?\Bannerify\Bannerify\Models\Operations\GetV1TemplatesSignedurlRequest $request,
    ): \Bannerify\Bannerify\Models\Operations\GetV1TemplatesSignedurlResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/templates/signedurl');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Bannerify\Bannerify\Models\Operations\GetV1TemplatesSignedurlRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json;q=1, image/png;q=0';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Bannerify\Bannerify\Models\Operations\GetV1TemplatesSignedurlResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'image/png')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneOf = $serializer->deserialize((string) $httpResponse->getBody(), 'mixed', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errUnauthorized = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrUnauthorized', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errForbidden = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrForbidden', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errNotFound = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrNotFound', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errConflict = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrConflict', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errTooManyRequests = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrTooManyRequests', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errInternalServerError = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Components\ErrInternalServerError', 'json');
            }
        }

        return $response;
    }

    /**
     * Get project info
     *
     * @param  string  $apiKey
     * @return \Bannerify\Bannerify\Models\Operations\GetV1InfoResponse
     */
    public function getV1Info(
        string $apiKey,
    ): \Bannerify\Bannerify\Models\Operations\GetV1InfoResponse {
        $request = new \Bannerify\Bannerify\Models\Operations\GetV1InfoRequest();
        $request->apiKey = $apiKey;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/info');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Bannerify\Bannerify\Models\Operations\GetV1InfoRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Bannerify\Bannerify\Models\Operations\GetV1InfoResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'Bannerify\Bannerify\Models\Operations\GetV1InfoResponseBody', 'json');
            }
        }

        return $response;
    }
}